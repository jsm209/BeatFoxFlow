DESIGN DOC
"Beatfox" is a game that relies on rhythm and timing to defeat enemies and avoid traps.

#################################
# New implementation for traps! #
#################################
Dilemma: Spikes are becoming off time because of either a coding error or 
because of some Unity process... either way there is a surefire solution to try.

Solution: Implement a "beat manager" that every beat, will shoot out a trigger 
to all the objects with a "heartBeat" tag or something. The trigger, probably 
a line that calls a method of the object to "process beat", and the object 
will react accordingly.
--DONE--

#######################################
# IMPLEMENTATION FOR PROCEDURAL MUSIC #
#######################################
Dilemma: Need a way to have music stay on beat, and be generated on the fly.

Solution: Create a script called "musician" that takes in degrees 1-7 of a scale. These 7 slots are
places to store either chords or individual notes that can be played to reflect I-VII.

The script will use a queue of 2 dimensional arrays, where the arrays contain groups of 8 beats. 
Each array might reflect a melodic passage or a chord progression, where each beat, that array
of notes will be played:

Example of one element in the queue:
[ [2, 4, 6], [5, 7, 1], [1, 3, 5], [6, 1, 3], [2, 4, 6], [5, 7, 1], [1, 3, 5], [6, 1, 3] ]

At any given time, the queue will always have two elements, where as soon as one leaves another is
chosen based on the current situation. Therefore, everything will change in groups of 8 beats.

Create another script, call "composer" full of 2D array "chunks", as a map where the key is the 
name of the passage. Additionally, it should increase in intensity, such that the first index of 
the map is a calm piece and the last (probably like 5th index) is a high intensity piece.  

Each part will contain a "score" of music, such that the melody will have an arragement of 2d arrays,
the chords will have an arrangement, and the bass will have an arrangement.

These "composer" scripts will be assigned to a "musician" script to be played, where the musician script
will have access to the 7 degrees of a scale.

Depending on the amount of enemies on screen, the musician script will react accordingly when choosing a new
element to load into the queue.

Intensity levels:
1 - No enemies on screen
2 - 1 to 3 enemies on screen
3 - 4 to 6 enemies on screen
4 - 7 to 9 enemies on screen
5 - 10+ enemies on screen


##########################
# PLAN TO FIX ANIMATIONS #
##########################
Dilemma: The animations keep looping throughout the time the beat is active.
I want the trap to have a startup animation, an active animation, a cooldown animation,
and an idle animation.

Solution: Have the trap play startup animation when isTriggered is true, which has to be
short enough (like 2 frames) that it will quickly lead into the active animation, then when
isTriggered is false, it will leave the active animation into the cooldown animation, which
leads into the idle animation. The idle animation will only proceed to the startup animation
if isTriggered is true again.

#####################
# PLANNED MECHANICS #
#####################
- The traps will form a percussion section, which when triggered, will be a sound.
- The chords and melodies will form into stems which can be played randomly and interchangbly for dynamic music.
- The overworld will be a final fantasy type overworld, with random encounters (visably avoidable though, so it's not annoying)
  that result in a quick battle with random enemies on a random arena. The player will earn money this way. Player can flee by running
  off to the side. The player fights by "biting" the enemies.
- There will be a total of 12 levels, 4 per region (northern woods, southern woods, central woods), where upon the completion of 3 levels
  and its respective boss level, will award the player with one of the following abilities (double jump, dash, crawl, but maybe a crawl dash 
  if the player has both...) that allows the player to progress through the game in different paths akin to BOTW.
- The final boss can be accessed at any time by visiting the center of the map, however it will be built in a way that it wil be very hard to
  defeat without the three abilities. This can be achieved with sheer difficulty with a boss rush of the bosses the player hasn't defeated yet.
- Money can be spent on increasing hearts, refilling hearts, and increasing movement speed.
End Goal:
- This game will be finished when it has 12 levels, unlockable abilities, 3 bosses (final boss could just be a boss rush), dynamic music score,
  an overworld, and a shop.

################################
# THINGS I NEED TO MAKE LEVELS #
################################
- sprites for changing scenary
- Closed hat (thorn trap)
- Open hat (Flame flower trap)
- Kick Drum (ceiling plant that shoots a giant seed)
- Snare (plant that whips vines outwards.)
- Enemy that patrols platform, only moving on active beats
- Enemy that shoots something on active beats.
- Enemy that flies, only moving on active beats
--- SPRITES TO DRAW ---
- toplayer grass sprite
- groundlayer dirt sprite
- tree trunk sprite
- tree trunk tunnel sprite
- branch sprite
- enemy that patrols platform

##################################################
# MINIMUM VIABLE PRODUCT FOR MUSIC GAME JAM 2018 #
##################################################
- ** Design 5 complete, challenging levels (1 day)
- *** 7 enemies, (the 4 current plants + 3 enemies, one land, jumping, flying) (2 days)
DONE - * procedurally generated music (1 day)
DONE - ***** you can only jump on beat, and can fastfall on beat. Fastfalling on things
		is the method of attack. (1 day)
- ** main menu, gui, branding, touching up art, program music (1 day)
		- white "shocks" for player impacts and jumps.
		- grass tufts on ground
		- danger1 = simple melodies, sparse major chords, conssance
		- danger2 = faster melodies, somewhat sparse major chords
		- danger3 = faster melodies, frequent minor chords, dissonance


